1조 : 
-관계 '관리'는 다대일이 아니라 일대다일 듯.
-관계 '치료'의 대응수도 다대일인 듯
- 프로그램 기능이 다소 밋밋. 다양한 검색 기능을 추가할 필요가 있음.

2조 : 
- 기능을 제대로 정의하시오.
- 약성개체 급여가 맞는가? 왜 약성인가? 왜 다대일인가? 
- DB 구조가 너무 단순함. 좀더 독창적으로 할 필요가 있는 듯함.

3조 : 
- 관리자와 지역은 소속이라는 관계가 없는가?
- DB 구조가 단순함. 그래서 검색 기능또한 매우 단순한 것으로 예상됨.
(현재 기술되어 있는 프로그램의 기능 또한 단순 검색과 삽입, 수정 등으로 구성되어 있음)
- 조금 더 범위를 넓힐 필요가 있음.

4조* :
- 프로젝트 기능 설명 부분에 너무 단순한 검색 기능만 제공하고 있음.
- 요구사항 명세서에는 데이터에 대한 내용만 정의하면 됨.
예를 들어 3) 안경점의 기능을 이용하려면 로그인을 먼저 해야 한다.
4) 로그인에는 관리자와 직원 두 가지 로그인으로 이용할 수 있다 는 프로그램의 기능에 해당함.
- ERD에서 관계가 다수의 외래키를 포함하고 있음. 오류임. 예 : 직원관리, 매출관리
- 관계 "직원관리"가 다대다인가?
- 관계 "구입"은 다대다이어야 함.
- 개체 매출과 매출 관리는 불필요함. 대신 그 속성은 관계 '구입'의 속성으로 표현
- 이에 맞춰 릴레이션 스키마를 재수정하기 바람.

5조 : 
- 다소 많은 릴레이션. 그에 걸맞는 검색 기능(조인기능)을 제공할 필요가 있음.
- 숙박, 관광지, 음식점을 약성개체를 잡을 필요가 없음.
- 음식점 예약 기능을 없는가?
- 숙박이나 음식점을 어떻게 표현한 것인지를 나타내지 않음. 
다시 말해, 하나의 숙박시설에는 여러 방이 있고, 하나의 음식점에는 여러 테이블이 있음.
이를 어떻게 표현하는지 안 나타나 있음. 그럴 경우 예약을 어떻게 하고, 예약 중복이 안되게끔 해야 함.

6조 : 
- 너무 단순함. 개체가 3개라....
- 관계 '공급'은 일대다인 것 같음.
- 좀더 추가할 필요가 있음. 예를 들어 대여에 따른 선호도 기록이라든지, 추가적인 개체가 있으면 좋겠음.

7조 :
- 프로그램의 기능이 없음.
- 할인행사가 의류 구매와 관계를 맺어야 함. 이런 경우 할인행사, 회원, 의류가 구매에 관여함.
이 때 구매는 릴레이션으로 표현되고, 이때 PK는 구매번호. 
왜냐하면 3개 개체의 PK의 조합이 구매의 PK가 되면 할인행사와 연관이 없는 구매도
있을 수 있으므로 할인번호는 NULL이 되어야 하기 때문
- 의류요청에 의해 의류를 납품 받았을 때 어디에 그 기록이 남는지? 현재 의류 요청과 의류와의
관계가 없는 것이 이상함.

8조 : 
- 프로그램의 기능 서술이 너무 형식적이고, 단편적임.
- 세부 역할 구분이 SQL 기능 구현까지 포함되어야 함.
- 너무 일반적인(교과서에 나올만한) ERD. 보다 창의적인 DB 설계 및 추가가 요구됨.
- 실제로 회원이 제작사에 대한 평가를 할 것 같지는 않음
- 게시글이 약성개체일 필요는 없음

9조 :
- 개최의 대응수가 일대다임
- 참여의 대응수가 다대다임
- 별로 손댈게 없지만, 너무 단순하고 일반적인 ERD
- 어떤 검색 기능을 보강해야 할 지 많은 고민이 필요함.

10조* : 
- 프로젝트의 기능(검색기능) 설명이 없음
- 정효석이 역할이 미미함. 세부 역할은 디자인과 검색기능까지 포함해서 구분해야 함.
- 탑승관계는 다대다임(현재는 승객이 오로지 하나의 선박만 탑승한다는 얘기)
- 관계 업무는 일대다임
- 선장도 선원이면 일진관계(선장 개체가 불필요)
- 물품은 선박에 소속되는 것이라 둘간의 관계도 맺어야 함. 선원과 물품은 이용관계임
- 관리자가 선장을 관리하는 것보다 관리자는 선박을 관리하는 것이 맞아 보임. 그 때 다대다.
- 많은 변경이 필요함. 이에 맞춰 릴레이션 스키마 재구성이 필요함.

11조 :
- 프로젝트 기능 설명은 단순하게 하나의 테이블단위의 검색만 있음.
- 세부 역할이 너무 형식적임. 정찬우는 환경구축과 보고서 작성이라...
- 명세서 8) 직원은 하나의 담당 파트를 가진다. 파트가 무엇인지?
- 회원과 매점간의 구매에서는 구매항목은 기록하지 않는가?
(이런 경우 회원과 기념품간의 구매 관계가 성립함)
- 예매 부분이 이상함. 좌석번호 속성은 어디에서 온 것인가? 상영관과 연관성이 있어야 할 듯.
(결국 회원은 영화를 구매하는 것이 아니라 상영관의 좌석이 구매하는 것이 맞음.
그러면 그 시점의 상영관, 좌석이면 해당 영화가 결정됨)

12조* :
- 세부 역할 구분을 할 필요가 있음. 각각의 검색 기능을 세분화해서 역할 분담을 해야 함
- 개체 현재 기상은 튜플이 몇개일까? 하나라면 굳이 릴레이션을 둘 필요가 없음
- DB를 구성했을 때 전체적인 데이터의 수가 별로 없을 것 같고, 
튜플의 동적인 추가 삭제가 별로 없음. 이런 경우 DB를 사용하는 목적에 별로 부합하지 않음.
- 따라서 입장제한과 기상제한의 변경으로 어떤 효과가 있는지 기능적으로 잘 구현할 필요가 있음.

13조 :
- 프로젝트 기능 설명이 너무 단순. 다양한 검색 기능을 추가 해야 함.
- 회원도 구입할 수 있음. 따라서 차량 주인도 회원 등록이 필요하고, 
이런 경우 차량주인과 회원을 합쳐서 표현해야 함.
단, 회원과 차량과의 관계가 두가지(구매, 판매). 
- 딜러와 차량과의 관계가 성립되어 있으므로 회원과 딜러간의 관계는 불필요.
다시 말해, 딜러와 회원간에는 그 중간에 차량이 있으므로 간접적으로 연결됨.
- 이벤트가 구체적으로 어떤 역할을 하는 것인지 모호함.
- 예약과 매매의 차이를 잘 구분해서 데이터를 관리해야 함.

14조 : 
- 프로젝트 기능 설명은 좋지만, 실제로 시연할 때 실시간으로 변하는 교통 정보를 어떻게
표현해서 시연할 것인가? 쉽지 않은 문제. 
실제 대중교통 정보 시스템에서는 센서로 부터 실시간으로 데이터가 입력됨.
- 버스, 지하철, KTX가 이름만 다를 뿐 데이터나 기능은 큰 차이가 없어 보임.
- 사용자가 개체로 필요한가? 이것은 DB로 기록될 것이 아니라 프로그램사용자가 실시간 위치만
입력하면 되는 것이라 사용자를 DB로 기록할  필요가 없음.
- 사용자를 삭제하면 개체 서로 간의 연계성이 별로 없으며, 그런 경우 다양한 테이블을 이용한
검색 기능을 구현하기 어려움.
- 이런 상황을 감안하여 재구성할 필요가 있음.

